AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a Lambda function, an API Gateway, an IAM role, and gives permission for the API Gateway to use the lambda function. The Lambda function queries cloudwatch data for a specified AWS Connect instance and contact flow. The API Gateway is the bridge between the client side and the AWS Connect data, and on activation, triggers the lambda, returning the data to the client side. The IAM role gives the Lambda full access to CloudWatch.
Parameters:
  IAMRoleName:
    Type: String
    Description: "IAM role to allow lambda full access to CloudWatch to be able to access the database using the python boto3 aws class for cloudwatch. Maximum 64 characters. Use alphanumeric and '+=,.@-_' characters."
    ConstraintDescription: "Maximum 64 characters. Use alphanumeric and '+=,.@-_' characters."
    AllowedPattern: ^[a-zA-Z0-9 +=,.@_-]{1,64}$
    MinLength: 1
    MaxLength: 64
  LambdaFunctionName:
    Type: String
    Description: "Lambda Function Name. Use only letters, numbers, hyphens, or underscores with no spaces."
    ConstraintDescription: "Use only letters, numbers, hyphens, or underscores with no spaces. There cannot currently be a Lambda function with the same name in your instance."
    AllowedPattern: ^[a-zA-Z0-9_-]+$
    MinLength: 1
    MaxLength: 64
  APIGatewayName:
    Type: String
    Description: "Public REST API Gateway name that will be made private via Amazon Cognito"
    MinLength: 1
    MaxLength: 64
  APIGatewayPathname:
    Type: String
    Description: "Pathname for the API Gateway that will lead to the connect metrics. This pathway will contain the HTTP requests configured"
    MinLength: 1
    MaxLength: 64
  APIGatewayStagename:
    Type: String
    Description: "Stagename for the API Gateway that will host the pathnames"
    MinLength: 1
    MaxLength: 64

Resources:
  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref IAMRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'FullAccessCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                  - 'cloudwatch:*'
                Resource: '*'

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties: 
      FunctionName: !Ref LambdaFunctionName
      Runtime: 'python3.11'
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Handler: 'index.lambda_handler'
      Code:
        ZipFile: |
          import json #For handling json data
          import boto3 #For using the aws boto3 sdk
          import os #For potential environment variables
          from datetime import datetime, timedelta, timezone #For time manipulation
          from zoneinfo import ZoneInfo #For handling time change from UTC (times from cloudwatch) to US Central time in this case

          def lambda_handler(event, context):
              client = boto3.client('cloudwatch') #Create a cloudwatch client to use the get metric data method
              
              
              awsARN = event['connectARN'] #ARN of the AWS Connect instance passed in via parameter
              contactFlowARN = event['contactFlowARN'] #ARN of AWS Connect specific contact flow passed in via parameter
              
              if "timeframeLength" in event: #If parameter passed in, use this, if not, initialize to empty string. For certain start time to present
                  timeframeLength = event['timeframeLength']
              else:
                  timeframeLength = "";
              if "timeframeUnit" in event: #If parameter passed in, use this, if not, initialize to empty string. For certain start time to present
                  timeframeUnit = event['timeframeUnit']
              else:
                  timeframeUnit = "";
              if "customStartTime" in event: #If parameter passed in, use this, if not, initialize to empty string. For certain start and end time
                  customStartTime = event['customStartTime']
              else:
                  customStartTime = "";
              if "customEndTime" in event: #If parameter passed in, use this, if not, initialize to empty string. For certain start and end time
                  customEndTime = event['customEndTime']
              else:
                  customEndTime = "";
              

              # Define the time range
              end_time = datetime.now() #End time defaults to present
              if timeframeLength and timeframeUnit: #If want to use preset start time and current end time, use this block
                  dateArgs = {timeframeUnit: int(timeframeLength)}
                  start_time = end_time - timedelta(**dateArgs)
              else:
                  start_time = end_time - timedelta(weeks=2) #Default is metrics for last 2 weeks
              if customStartTime and customEndTime: #If want to use custom start and end times, use this block
                  start_time = datetime.strptime(customStartTime, "%Y-%m-%d")
                  end_time = datetime.strptime(customEndTime, "%Y-%m-%d")
              

              # Define the parameters for the get_metric_data call
              params = {
                  'StartTime': start_time, #Start time for metric data
                  'EndTime': end_time, #End time for metric data
                  'MetricDataQueries': [ #List of metric data queries to perform
                      {
                          'Id': 'calls_per_interval',  #Metric query for calls per interval
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'CallsPerInterval',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "VoiceCalls"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'missed_calls',  #Metric query for number of missed calls
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'MissedCalls',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "VoiceCalls"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'calls_breaching_concurrency_quota',  #Metric query for calls breaching concurrency quota
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'CallsBreachingConcurrencyQuota',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "VoiceCalls"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'call_recording_upload_error',  #Metric query for call recording upload error
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'CallRecordingUploadError',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "CallRecordings"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'chats_breaching_active_chat_quota',  #Metric query for chats breaching active chat quota
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ChatsBreachingActiveChatQuota',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "Chats"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'concurrent_active_chats',  #Metric query for concurrent active chats
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ConcurrentActiveChats',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "Chats"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'contact_flow_errors',  #Metric query for contact flow errors 
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ContactFlowErrors',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID for devinstance
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "ContactFlow"
                                      },
                                      {
                                        "Name": "ContactFlowName",
                                        "Value": contactFlowARN
                                      }
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'contact_flow_fatal_errors',  #Metric query for fatal contact flow errors
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ContactFlowFatalErrors',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID for devinstance
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "ContactFlow"
                                      },
                                      {
                                        "Name": "ContactFlowName",
                                        "Value": contactFlowARN
                                      }
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'throttled_calls',  #Metric query for throttled calls
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ThrottledCalls',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "MetricGroup",
                                          "Value": "VoiceCalls"
                                      },
                                      
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      },
                      {
                          'Id': 'to_instance_packet_loss_rate',  # Metric query for packet loss rate
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/Connect',
                                  'MetricName': 'ToInstancePacketLossRate',
                                  'Dimensions': [
                                      {
                                          'Name': 'InstanceId',
                                          'Value': awsARN  # AWS Connect Instance ID
                                      },
                                      {
                                          "Name": "Participant",
                                          "Value": "Agent"
                                      },
                                      {
                                          "Name": "Type of Connection",
                                          "Value": "WebRTC"
                                      },
                                      {
                                          "Name": "Stream Type",
                                          "Value": "Voice"
                                      },
                                  ]
                              },
                              'Period': 300,  # Period in seconds (5 minutes)
                              'Stat': 'Sum',  # Statistic to retrieve
                              'Unit': 'Count'  # Unit of the metric
                          },
                          'ReturnData': True
                      }
                  ]
              }
              
              # List metrics in use on Cloudwatch for Amazon Connect
              # metricsListResponse = client.list_metrics(Namespace="AWS/Connect")
              # return metricsListResponse

              metricDataResponse = client.get_metric_data(**params) #Fetch data for the defined queries

              allDataResponse = [] #Initialize an array to hold data from fetch request
              allDataResponse.append(metricDataResponse) #Add data to array to loop through below

              #Handle pagination if necessary (in case there is more data to retrieve)
              while "NextToken" in metricDataResponse: #Check if there is more data to fetch (pagination)
                  params["NextToken"] = metricDataResponse["NextToken"] #Add NextToken to the parameters for the next API call
                  newMetricDataResponse = client.get_metric_data(**params) #Fetch the next set of data
                  allDataResponse.append(newMetricDataResponse) #Append the new data response to the list
                  metricDataResponse = newMetricDataResponse #Update the main response variable

              
              #Format timestamps into a more readable format (e.g. "MM/DD HH:MM Am/Pm")
              for element in allDataResponse: #Iterate through each data response
                  for metric in element['MetricDataResults']: #Iterate through each metric result
                      metric['Timestamps'] = [value.replace(tzinfo=ZoneInfo("UTC")).astimezone(ZoneInfo("US/Central")).strftime("%m/%d %-I:%M %p") for value in metric['Timestamps']] #Format time stamp by converting from UTC to US Central, then formatting in readable MM/DD HH:MM AM/PM
                    
              #Merge data from all responses into a single dictionary for each metric

              mergedData = {} #Initialize an empty dictionary to store the merged data
                    
              for element in allDataResponse: #Iterate over all data responses
                  if element["ResponseMetadata"]["HTTPStatusCode"] == 200: #Check if the response was successful
                      for result in element["MetricDataResults"]: #Iterate over the metric data results
                          metric_id = result["Id"] #Get the id of the current metric
                          if metric_id not in mergedData: #If this metric is not already in mergedData
                              mergedData[metric_id] = { #Initialize the entry for this metric
                                  "Id": metric_id,
                                  "Label": result["Label"], #Store the label for the metric
                                  "Timestamps": [], #Initialize empty list for metric timestamps
                                  "Values": [], #Initialize empty list for metric values
                              }
                          #Append the current metric's timestamps and values to the merged data
                          mergedData[metric_id]["Timestamps"].extend(result["Timestamps"])
                          mergedData[metric_id]["Values"].extend(result["Values"])
                        
              allMergedData = list(mergedData.values()) #Get all merged metric data as a list

              #Loop through for every metric its timestamps and values and reverse them, because cloudwatch by default gives values in reverse chronological order
              for metric in allMergedData:
                  metric['Timestamps'] = metric["Timestamps"][::-1]
                  metric['Values'] = metric['Values'][::-1]

              # Return the merged metric data as the final result of the Lambda function
              return {
                  "MetricDataResults": allMergedData # Return the merged metric data
              }

      MemorySize: 128
      Timeout: 60

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref APIGatewayName
      Description: 'REST API Gateway for a bridge with auth between the front end and customer CloudWatch Metrics'

  MyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: !Ref APIGatewayPathname
      RestApiId: !Ref MyApiGateway

  MyApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'ANY'
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApiGateway
      RequestParameters:
        method.request.querystring.connectARN: true
        method.request.querystring.contactFlowARN: true
        method.request.querystring.timeframeLength: false
        method.request.querystring.timeframeUnit: false
        method.request.querystring.customEndTime: false
        method.request.querystring.customStartTime: false
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS'
        Uri: 
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn: !GetAtt MyLambdaFunction.Arn
        RequestParameters:
          integration.request.querystring.connectARN: 'method.request.querystring.connectARN'
          integration.request.querystring.contactFlowARN: 'method.request.querystring.contactFlowARN'
          integration.request.querystring.timeframeLength: 'method.request.querystring.timeframeLength'
          integration.request.querystring.timeframeUnit: 'method.request.querystring.timeframeUnit'
          integration.request.querystring.customStartTime: 'method.request.querystring.customStartTime'
          integration.request.querystring.customEndTime: 'method.request.querystring.customEndTime'
        RequestTemplates:
          application/json: |
            {
              "timeframeLength": "$input.params('timeframeLength')",
              "timeframeUnit": "$input.params('timeframeUnit')",
              "connectARN": "$input.params('connectARN')",
              "contactFlowARN": "$input.params('contactFlowARN')",
              "customStartTime": "$input.params('customStartTime')",
              "customEndTime": "$input.params('customEndTime')"
            }

        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin': "'*'"
              'method.response.header.Access-Control-Allow-Headers': "'*'"
              'method.response.header.Access-Control-Allow-Methods': "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': true
            'method.response.header.Access-Control-Allow-Methods': true
            'method.response.header.Access-Control-Allow-Headers': true
          ResponseModels:
            application/json: "Empty"


  MyApiOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'OPTIONS'
        Type: 'MOCK'
        RequestTemplates:
          application/json: |
            {
                "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin': "'*'"
              'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              'method.response.header.Access-Control-Allow-Methods': "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': true
            'method.response.header.Access-Control-Allow-Headers': true
            'method.response.header.Access-Control-Allow-Methods': true


  MyApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: !Ref APIGatewayStagename
    DependsOn:
      - MyApiMethod
      - MyApiOptionsMethod

  LambdaApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWSRegion}:${AWSAccountId}:${MyApiId}/*/${MyApiMethod}/${MyApiResourcePath}
          - AWSRegion: !Ref "AWS::Region"
            AWSAccountId: !Ref "AWS::AccountId"
            MyApiId: !Ref MyApiGateway
            MyApiMethod: "GET"
            MyApiResourcePath: !Ref APIGatewayPathname
